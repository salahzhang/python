def symmetry(position,line):
    res=[0,0]
    if line[0]==0:
        res[0]=position[0]
        res[1]=position[1]+2*(line[1]-position[1])
    elif line[1]==0:
        res[0]=position[0]+2*(line[0]-position[0])
        res[1]=position[1]
    else:
        return False
    return res

def length(posistion1,position2):
    return round(((posistion1[0]-position2[0])**2+ (posistion1[1]-position2[1])**2)**0.5,7)

def mirror(position1, position2,m,n,distance):
    res =[]
    p=list(position2)
    ln1=[m,0]
    while length(position1,p)<=distance:
        res.append(p)
        p=symmetry(p,ln1)
        ln1[0]+=m

    ln2=[-m,0]
    q=list(position2)
    q[0]=q[0]*-1
    while length(position1,q)<=distance:
        res.append(q)
        q=symmetry(q,ln2)
        ln2[0]-=m

    res_v=[]
    for i in range(len(res)):
        a=list(res[i])
        ln3=[0,n]
        a=symmetry(a,ln3)
        while length(position1,a)<=distance:
            res_v.append(a)
            ln3[1]+=n
            a=symmetry(a,ln3)

    for i in range(len(res)):
        b=list(res[i])
        ln4=[0,-n]
        b[1]=b[1]*-1
        while length(position1,b)<=distance:
            res_v.append(b)
            b = symmetry(b, ln4)
            ln4[1]-=n
    res+=res_v

    return res


def intialization(v):
    res=[]
    m=v[0]
    n=v[1]
    d=round((m**2+n**2)**0.5,7)
    m=round(m/d,7)
    n=round(n/d,7)
    res.append(m)
    res.append(n)
    return res


#
#
def answer(dimensions, captain_position, badguy_position, distance):
    c=list(captain_position)
    b=list(badguy_position)
    m=dimensions[0]
    n=dimensions[1]


    #for mirror
    targets=mirror(c,b,m,n,distance)
    balls=mirror(c,c,m,n,distance)

    dictt=dict()
    dictb=dict()

    #save all difference vector from c to mirror b, including original
    for i in range(len(targets)):
        vt=[0,0]
        vt[0]=targets[i][0]-c[0]
        vt[1]=targets[i][1]-c[1]
        vt=intialization(vt)
        vt=str(vt)
        d=length(c,targets[i])
        if dictt.get(vt) is not None:
            if d< dictt.get(vt):
                dictt[vt]=d
        else:
            dictt[vt]=d

    # save all difference vector from c to mirror c, including original
    for i in range(len(balls)):
        vt=[0,0]
        vt[0]=balls[i][0]-c[0]
        vt[1]=balls[i][1]-c[1]
        if vt[0]==0 and vt[1]==0:
            vt=0
        else:
            vt=intialization(vt)
        vt=str(vt)
        d=length(c,balls[i])
        if dictb.get(vt) is not None:
            if d< dictb.get(vt):
                dictb[vt]=d
        else:
            dictb[vt]=d
    del dictb['0']

    #compair the two dict, if dictb[vt]<dictt[vt], then remove
    for vt in dictb:
        if vt in dictt:
            if dictb[vt]< dictt[vt]:
                del dictt[vt]

    return len(dictt)
